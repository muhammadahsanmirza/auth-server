tags:
  - name: Authentication
    description: API endpoints for user authentication

paths:
  /auth/signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Name
                - email
                - password
              properties:
                Name:
                  type: string
                  example: John Doe
                  description: User's full name
                email:
                  type: string
                  format: email
                  example: john@example.com
                  description: User's email address
                password:
                  type: string
                  format: password
                  example: Password123!
                  description: User's password (min 8 chars, must include uppercase, lowercase, and special char)
                role:
                  type: string
                  enum: [user, manager, admin]
                  example: user
                  description: User's role (defaults to 'user' if not specified)
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User registered successfully
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: 60d21b4667d0d8992e610c85
                          Name:
                            type: string
                            example: John Doe
                          email:
                            type: string
                            example: john@example.com
                          role:
                            type: string
                            example: user
                          authProvider:
                            type: string
                            example: local
                          createdAt:
                            type: string
                            format: date-time
                          updatedAt:
                            type: string
                            format: date-time
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and get access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: Password123!
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login successful
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: 60d21b4667d0d8992e610c85
                          Name:
                            type: string
                            example: John Doe
                          email:
                            type: string
                            example: john@example.com
                          role:
                            type: string
                            example: user
                          authProvider:
                            type: string
                            example: local
                          createdAt:
                            type: string
                            format: date-time
                          updatedAt:
                            type: string
                            format: date-time
                      # Removed accessToken since it's not in the response body
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get new access token using refresh token
      requestBody:
        required: false
        content:
          application/json:
      responses:
        200:
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Token refreshed successfully
                  
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/user:
    get:
      tags:
        - Authentication
      summary: Get user profile
      description: Get current authenticated user's profile
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User profile retrieved successfully
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: 60d21b4667d0d8992e610c85
                          Name:
                            type: string
                            example: John Doe
                          email:
                            type: string
                            example: john@example.com
                          role:
                            type: string
                            example: user
                          authProvider:
                            type: string
                            example: local
                          createdAt:
                            type: string
                            format: date-time
                          updatedAt:
                            type: string
                            format: date-time
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Error message
        errors:
          type: object
          example: null
    ValidationError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Validation failed
        errors:
          type: object
          properties:
            email:
              type: object
              properties:
                message:
                  type: string
                  example: Please provide a valid email address
            password:
              type: object
              properties:
                message:
                  type: string
                  example: Password must contain at least one uppercase letter, one lowercase letter, and one special character